{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","id","username","getUserById","usersFromServer","find","prepareList","userId","App","useState","preparedList","setPreparedList","setTitle","setUserId","touched","setTouched","isUserSelected","setIsUserSelected","isCompleted","setIsCompleted","titleError","userError","action","method","onSubmit","event","preventDefault","trim","Math","max","htmlFor","type","placeholder","value","onChange","target","onBlur","defaultValue","required","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07a1544c.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n  key: number;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id=\"1\"\n    className={classNames(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    <UserInfo user={todo.user} />\n  </article>\n);\n","// import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","// #region IMPORTS\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n// #endregion\n\nfunction getUserById(id: number): User {\n  return usersFromServer.find(user => user.id === id) as User;\n}\n\nconst prepareList = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUserById(todo.userId),\n  };\n});\n\nexport const App = () => {\n  const [preparedList, setPreparedList] = useState(prepareList);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [touched, setTouched] = useState(false);\n  const [isUserSelected, setIsUserSelected] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const titleError = !title && touched;\n\n  const userError = userId === 0 && isUserSelected;\n\n  function getNewTodoId() {\n    const currentMax = Math.max(...preparedList.map(todo => todo.id));\n\n    return currentMax + 1;\n  }\n\n  function handleSubmitNewTodo(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitle('');\n      setTouched(true);\n    }\n\n    if (userId === 0) {\n      setIsUserSelected(true);\n    }\n\n    if (!title.trim() || userId === 0) {\n      return;\n    }\n\n    if (isUserSelected && title.trim()) {\n      setPreparedList([\n        ...preparedList,\n        {\n          id: getNewTodoId(),\n          title,\n          completed: isCompleted,\n          userId,\n          user: getUserById(userId),\n        }]);\n      setTitle('');\n      setUserId(0);\n      setIsCompleted(false);\n      setTouched(false);\n      setIsUserSelected(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmitNewTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            Write your Todo task in the field\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              className={classNames('input', {\n                'is-danger': titleError,\n              })}\n              placeholder=\"type here\"\n              value={title}\n              onChange={event => setTitle(event.target.value)}\n              onBlur={() => setTouched(true)}\n            // required\n            />\n            {titleError && (\n              <span className=\"error\">\n                {/* eslint-disable-next-line @typescript-eslint/quotes */}\n                {` - type your title, please`}\n              </span>\n            )}\n          </label>\n        </div>\n\n        <br />\n\n        <div className=\"field\">\n          <label htmlFor=\"user-id\"> Select user: </label>\n          <select\n            id=\"user-id\"\n            data-cy=\"userSelect\"\n            defaultValue={userId}\n            required\n            onChange={(event) => {\n              setUserId(+event.target.value);\n              setIsUserSelected(true);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <br />\n\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            Is your task completed?\n            <input\n              type=\"checkbox\"\n              onChange={() => setIsCompleted(!isCompleted)}\n            />\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <hr />\n\n      <TodoList todos={preparedList} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}