{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","getUserById","usersFromServer","find","prepareList","userId","App","useState","preparedList","setPreparedList","setTitle","titleError","setTitleError","setUserId","isUserError","setIsUserError","isCompleted","setIsCompleted","action","method","onSubmit","event","preventDefault","trim","Math","max","htmlFor","type","placeholder","value","onChange","target","required","disabled","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e33ac772.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n  key: number;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    user,\n    title,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","// import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","// #region IMPORTS\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n// #endregion\n\nfunction getUserById(id: number): User {\n  return usersFromServer.find(user => user.id === id) as User;\n}\n\nconst prepareList = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUserById(todo.userId),\n  };\n});\n\nexport const App = () => {\n  const [preparedList, setPreparedList] = useState(prepareList);\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [isUserError, setIsUserError] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  // const userError = userId === 0 && isUserSelected;\n\n  function getNewTodoId() {\n    const currentMax = Math.max(...preparedList.map(todo => todo.id));\n\n    return currentMax + 1;\n  }\n\n  function handleSubmitNewTodo(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitle('');\n      setTitleError(true);\n    }\n\n    if (userId === 0) {\n      setIsUserError(true);\n    }\n\n    if (!title.trim() || userId === 0) {\n      return;\n    }\n\n    if (userId && title.trim()) {\n      setPreparedList([\n        ...preparedList,\n        {\n          id: getNewTodoId(),\n          title,\n          completed: isCompleted,\n          userId,\n          user: getUserById(userId),\n        }]);\n      setTitle('');\n      setUserId(0);\n      setIsUserError(false);\n      setIsCompleted(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmitNewTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            Write your Todo task in the field\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              className={classNames('input', {\n                'is-danger': titleError,\n              })}\n              placeholder=\"type here\"\n              value={title}\n              onChange={event => {\n                setTitle(event.target.value);\n                setTitleError(false);\n              }}\n            />\n            {titleError && (\n              <span className=\"error\">\n                {/* eslint-disable-next-line @typescript-eslint/quotes */}\n                {` Please enter a title`}\n              </span>\n            )}\n          </label>\n        </div>\n\n        <br />\n\n        <div className=\"field\">\n          <label htmlFor=\"user-id\"> Select user: </label>\n          <select\n            id=\"user-id\"\n            value={userId}\n            data-cy=\"userSelect\"\n            required\n            onChange={(event) => {\n              setUserId(+event.target.value);\n              setIsUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {isUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <br />\n\n        <div className=\"field\">\n          <label htmlFor=\"\">\n            Is your task completed?\n            <input\n              type=\"checkbox\"\n              onChange={() => setIsCompleted(!isCompleted)}\n              checked={isCompleted}\n            />\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <hr />\n\n      <TodoList todos={preparedList} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}